#!/usr/bin/env python3"""Computes the possible binding sites using a geometrical analysis. First the protein is selected from the file and the hydrogens are added to the structure. A grid and a Voronoi analysis are performed, in a way that the grid method computes the binding sites and its respective residues while the Voronoi method computes the residues that are likely to be in a binding site. The combined information is presented as a %. """if __name__ == "__main__":        import sys      import os    from Bio.PDB import PDBParser    from Bio.PDB import PDBIO    from cavpred.preprocess import *    from cavpred.grid import *    from cavpred.voronoi import *            # Store input     initialpdb = sys.argv[1]        # Store just the pdf filename (in case of a relative path)    if initialpdb.find("/") != -1:        pdbname = initialpdb[-initialpdb[::-1].find("/"):]        pdbname = pdbname[:pdbname.find(".")]    else:        pdbname = initialpdb[:initialpdb.find(".")]        # Create the results folder to store the created files    result_folder = "results_" + pdbname    if not os.path.exists(result_folder):        os.mkdir(result_folder)        # Get protein from the input    protpdb = protein.pdb_get_prot(initialpdb)        # Add the hydrogens to the protein    hpdb = hydrogens.pdb_add_H(protpdb)                      # Perform the analysis           # GRID analysis    print("\n\n=============\nGRID ANALYSIS\n")    grid_res_file, ncav = ganalysis.grid_analysis(hpdb)        # VORONOI analysis    print("\n\n================\nVORONOI ANALYSIS\n")    vor_res_file = vanalysis.voronoi_analysis(hpdb)        # Combining the information of both methods    grid_dict = gresults.get_grid_sites(grid_res_file, ncav)    vor_list = vresults.get_vor_residues(vor_res_file)        grid_positions = []    for site in grid_dict:        for aa in grid_dict[site]:            grid_positions.append(aa[0])        common_positions = 0    for aa, pos in vor_list:        if int(pos) in grid_positions:            common_positions += 1                common_percent = common_positions / len(grid_positions) * 100                    # Print results        print("    %.2f%% of the amino acids predicted to be in a binding site according to the GRID method is also likely to be in a binding site according to the VORONOI method."          % (common_percent))        resfile = result_folder + "/" + pdbname + "_binding_residues.txt"    print("\n\n========================\nPREDICTED BINDING SITES:\nStored at %s" % resfile)        with open(resfile, "w") as out:        out.write("### Each amino acid is represented in a line under its binding site.\n### Columns: position\tchain\t3letter_code\n")        n = 1        for site in grid_dict:            out.write(">> Binding site %i\n" % n)            for aa in grid_dict[site]:                out.write(str(aa[0]) + "\t" + aa[1] + "\t" + aa[2] + "\n")            n += 1            # Write the output pdb    # create the structure signaling the binding sites with b factors    grid_all_res = [aa for site in grid_dict for aa in grid_dict[site]]         p = PDBParser()    prot_str = p.get_structure("myprotein", initialpdb)        # clear old b factors    for residue in prot_str.get_residues():            for atom in residue.get_atoms():                atom.set_bfactor(0)        # set the binding sites b factors    for residue in prot_str.get_residues():        res_data = []                 try:            atom_data = residue["CA"].get_full_id()            pos = atom_data[3][1]            chain = atom_data[2]            aa = residue.get_resname()                        res_data = [pos, chain, aa]                except KeyError:            continue                if res_data in grid_all_res:            for atom in residue.get_atoms():                atom.set_bfactor(70)         # save it    io = PDBIO()    io.set_structure(prot_str)    io.save(result_folder + "/" + pdbname + "_binding_coloured.pdb")    