import pyKVFinder as kvfdef grid_analysis(pdb_file):    """Gets the cavities form a pdb file using the pyKVFinder module."""        # Store the result name path     result_folder = pdb_file[:pdb_file.find("/")]        # 1. Load Van Der Waals radii dictionary    vdw = kvf.read_vdw()        # 2. Load data from target structure    atomic = kvf.read_pdb(pdb_file)        # 3. Dimensioning the 3D grid    vertices = kvf.get_vertices(atomic)        # 4. Detecting biomolecular cavities    ncav, cavities = kvf.detect(atomic, vertices)    print("A total number of %i cavities were found." % ncav)        # 5. Performing spatial characterization    surface, volume, area = kvf.spatial(cavities)        # 6. Performing constitutional characterization (identify interface residues)    residues = kvf.constitutional(cavities, atomic, vertices)    frequencies = kvf.calculate_frequencies(residues)        # 7. Performing hydropathy characterization    scales, avg_hydropathy = kvf.hydropathy(surface, atomic, vertices)        # 8. Performing depth characterization: degree of burial of binding site    depths, max_depth, avg_depth = kvf.depth(cavities)        # 9. Exporting cavities    output_cavity = result_folder + '/grid_files/cavity_with_depth.pdb'    output_hydropathy = result_folder + '/grid_files/hydropathy.pdb'    kvf.export(output_cavity, cavities, surface, vertices, B=depths, output_hydropathy=output_hydropathy, scales=scales)    # 10. Write results    output_results = result_folder + '/grid_files/results.toml'    kvf.write_results(output_results, input=pdb_file, ligand=None, output=output_cavity, volume=volume, area=area, max_depth=max_depth, avg_depth=avg_depth, residues=residues, frequencies=frequencies)        return(output_results, ncav)