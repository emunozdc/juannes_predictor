import MDAnalysis as mdaimport scipy.spatial as spimport osimport numpy as npimport matplotlib.pyplot as pltdef voronoi_analysis(protein_file, site_cutoff=0.0002):    """    Performs Voronoi analysis to find the PDB atoms which are more likely    to be part of a binding site based on the volumes of the voronoi cells.        Keyword arguments:    protein_file -- pdb file    site_cutoff -- threshold to define if a cell volume is in a cavity or not    """        # Store the result name path     result_folder = protein_file[:protein_file.find("/")]    pdbname = protein_file[protein_file.find("/") : protein_file.find("_H")]        # Load the protein structure    protein = mda.Universe(protein_file)    # Get the coordinates of the protein atoms    protein_coords = protein.select_atoms("protein").positions    # Compute the Voronoi diagram    vor = sp.Voronoi(protein_coords[:,:2])    # Compute the Delaunay triangulation    tri = sp.Delaunay(protein_coords[:,:2])    # Plot the Delaunay triangulation    fig, ax = plt.subplots()    ax.triplot(protein_coords[:,0], protein_coords[:,1], tri.simplices, label='Delaunay Triangulation')    ax.set_xlabel('Horizontal position')    ax.set_ylabel('Vertical position')    ax.legend(loc='upper right')    ax.set_title('Delaunay Triangulation of Protein Coordinates')        if not os.path.exists(result_folder + "/voronoi_files"):        os.makedirs(result_folder + "/voronoi_files")    plt.savefig(result_folder + "/voronoi_files/" + pdbname + "_delaunay.png")        # Compute the volumes of the Voronoi cells    cell_volumes = np.zeros(len(vor.points))    for i, region in enumerate(vor.regions):        if len(region) == 0 or -1 in region or len(region) > 20:            continue        valid_index = region[0]-1        if valid_index >= 0 and valid_index < len(cell_volumes):            cell_vertices = vor.vertices[region]            cell_volumes[valid_index] = sp.ConvexHull(cell_vertices).volume    # Scale the volumes to be between 0 and 1    cell_volumes /= np.max(cell_volumes)    # Identify the binding sites based on the Voronoi volumes    binding_sites = []    sites = []        for site_index, vol in enumerate(cell_volumes):        if vol > site_cutoff:             residue = protein.atoms[site_index].residue            if residue not in binding_sites:                binding_sites.append(residue)                try:                    site = protein.select_atoms(f"resid {residue.resid}")                    sites.append(site)                except:                    pass                    # Output binding sites to a text file    with open(result_folder + "/voronoi_files/" + pdbname + "_binding_sites.txt", "w") as f:        #f.write("Binding Site Residues:\n")        for site in binding_sites:            f.write(f"{site.resname} {site.resid}\n")    print("A total of %i residues found to be possibly on protein pockets.\n" % len(binding_sites))       voronoi_out = result_folder + "/voronoi_files/" + pdbname + "_binding_sites.txt"        # Output Voronoi diagram to a PNG file    plt.figure()    sp.voronoi_plot_2d(vor)    plt.title('Voronoi Diagram of Protein')    plt.xlabel('Position X')    plt.ylabel('Position Y')    plt.savefig(result_folder + "/voronoi_files/" + pdbname + "_voronoi.png")    # Write out the Voronoi diagram to output files    txt_file = result_folder + "/voronoi_files/" + pdbname + '_voronoi.txt'    with open(txt_file, "w") as f:        for i, ridge_points in enumerate(vor.ridge_points):            if -1 in ridge_points:                continue            vertex1, vertex2 = vor.vertices[ridge_points]            if len(vertex1) < 3 or len(vertex2) < 3:                continue            f.write(f"{i+1:5} {vertex1[0]:8.3f} {vertex1[1]:8.3f} {vertex1[2]:8.3f} {vertex2[0]:8.3f} {vertex2[1]:8.3f} {vertex2[2]:8.3f}\n")        return voronoi_out